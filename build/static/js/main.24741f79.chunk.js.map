{"version":3,"sources":["StateProvider.js","reducer.js","pages/Search.js","pages/Home.js","keys.js","useGoogleSearch.js","pages/SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","actionTypes","state","action","console","log","type","term","Search","hideButtons","dispatch","useState","input","setInput","history","useHistory","search","e","preventDefault","push","className","onChange","target","Button","onClick","variant","Home","to","Avatar","src","alt","API_KEY","useGoogleSearch","data","setData","useEffect","a","fetch","then","response","json","result","fetchData","SearchPage","searchInformation","formattedTotalResults","formattedSearchTime","items","map","item","href","link","pagemap","cse_image","length","displayLink","title","snippet","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.24741f79.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\n\nexport const StateContext = createContext(); // Preparing the data layer\n\n// \nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext); ","export const initialState = {\n  term: null,\n};\n\nexport const actionTypes = {\n  SET_SEARCH_TERM: \"SET_SEARCH_TERM\",\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case actionTypes.SET_SEARCH_TERM:\n      return {\n        ...state,\n        term: action.term,\n      };\n    default:\n      return state\n  }\n};\n\nexport default reducer;","import React, { useState } from 'react';\nimport './Search.css';\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { useStateValue } from \"../StateProvider\"\nimport { actionTypes } from \"../reducer\"\n\nfunction Search({ hideButtons = false }) {\n  const [{ }, dispatch] = useStateValue();\n\n  const [input, setInput] = useState(\"\");\n  const history = useHistory();\n\n  const search = (e) => {\n    e.preventDefault();\n\n    dispatch({\n      type: actionTypes.SET_SEARCH_TERM,\n      term: input\n    })\n\n    history.push(\"/search\");\n  }\n  return (\n    <form className='search'>\n      <div className='search__input'>\n        <SearchIcon className=\"search__inputIcon\" />\n        <input value={input} onChange={e => setInput(e.target.value)} />\n        <MicIcon />\n      </div>\n      {!hideButtons ? (\n        <div className=\"search__buttons\">\n          <Button type='submit' onClick={search} variant=\"outlined\">Google Search</Button>\n          <Button variant=\"outlined\">I'm Feeling Lucky</Button>\n        </div>\n      ) : (\n          <div className=\"search__buttons\">\n            <Button className=\"search__buttonsHidden\" type='submit' onClick={search} variant=\"outlined\">Google Search</Button>\n            <Button className=\"search__buttonsHidden\" variant=\"outlined\">I'm Feeling Lucky</Button>\n          </div>\n        )}\n\n    </form>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport './Home.css';\nimport { Link } from \"react-router-dom\"\nimport AppsIcon from \"@material-ui/icons/Apps\"\nimport { Avatar } from \"@material-ui/core\"\nimport Search from \"./Search\"\n\nfunction Home() {\n  return (\n    <div className=\"home\">\n      <div className=\"home__header\">\n        <div className='home__headerLeft'>\n          <Link to='/about'>About</Link>\n          <Link to='/store'>Store</Link>\n        </div>\n        <div className='home__headerRight'>\n          <Link to='/gmail'>Gmail</Link>\n          <Link to='/images'>Images</Link>\n          <AppsIcon />\n          <Avatar />\n        </div>\n      </div>\n\n      <div className='home__body'>\n        <img\n          src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"\n          alt=\"\"\n        />\n        <div className=\"home__inputContainer\">\n          <Search />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","export const API_KEY = \"AIzaSyC5Y1xnMr28UXDuRyCMV-0nhGwNYPnhxWA\";\nexport default API_KEY;","import { useState, useEffect } from \"react\";\nimport { API_KEY } from \"./keys\";\n\nconst CONTEXT_KEY = \"b0e3dfa70747837f7\";\n\nconst useGoogleSearch = (term) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      fetch(\n        `https://www.googleapis.com/customsearch/v1?key=${API_KEY}&cx=${CONTEXT_KEY}&q=${term}`\n      )\n        .then(response => response.json())\n        .then(result => {\n          setData(result)\n        })\n    }\n\n    fetchData();\n  }, [term])\n\n  return { data }\n};\n\nexport default useGoogleSearch;\n\n\n","import React from \"react\";\nimport \"./SearchPage.css\";\nimport { useStateValue } from \"../StateProvider\";\nimport useGoogleSearch from \"../useGoogleSearch\";\nimport Response from \"../response\";\nimport { Link } from \"react-router-dom\";\nimport Search from \"./Search\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport RoomIcon from \"@material-ui/icons/Room\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\n\nfunction SearchPage() {\n  const [{ term }, dispatch] = useStateValue();\n  // LIVE API CALL\n  const { data } = useGoogleSearch(term);\n  // const data = Response;\n  console.log(data);\n  return (\n    <div className=\"searchPage\">\n      <div className=\"searchPage__header\">\n        <Link to=\"/\">\n          <img\n            className=\"searchPage__logo\"\n            src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"\n            alt=\"\"\n          />\n        </Link>\n        <div className=\"searchPage__headerBody\">\n          <Search hideButtons />\n\n          <div className=\"searchPage__options\">\n            <div className=\"searchPage__optionsLeft\">\n              <div className=\"searchPage__option\">\n                <SearchIcon />\n                <Link to=\"/all\">All</Link>\n              </div>\n              <div className=\"searchPage__option\">\n                <DescriptionIcon />\n                <Link to=\"/news\">News</Link>\n              </div>\n              <div className=\"searchPage__option\">\n                <ImageIcon />\n                <Link to=\"/images\">Images</Link>\n              </div>\n              <div className=\"searchPage__option\">\n                <LocalOfferIcon />\n                <Link to=\"/shopping\">shopping</Link>\n              </div>\n              <div className=\"searchPage__option\">\n                <RoomIcon />\n                <Link to=\"/maps\">maps</Link>\n              </div>\n              <div className=\"searchPage__option\">\n                <MoreVertIcon />\n                <Link to=\"/more\">more</Link>\n              </div>\n            </div>\n            <div className=\"searchPage__optionsRight\">\n              <div className=\"searchPage__option\">\n                <Link to=\"/settings\">Settings</Link>\n              </div>\n              <div className=\"searchPage__option\">\n                <Link to=\"/tools\">Tools</Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {true && (\n        <div className=\"searchPage__results\">\n          <p className=\"searchPage__resultCount\">\n            About {data?.searchInformation.formattedTotalResults} results (\n            {data?.searchInformation.formattedSearchTime} seconds) for {term}\n          </p>\n          {data?.items.map((item) => (\n            <div className=\"searchPage__result\">\n              <a href={item.link}>\n                {item.pagemap?.cse_image?.length > 0 &&\n                  item.pagemap?.cse_image[0]?.src && (\n                    <img\n                      className=\"searchPage__resultImage\"\n                      src={\n                        item.pagemap?.cse_image?.length > 0 &&\n                        item.pagemap?.cse_image[0]?.src\n                      }\n                    />\n                  )}\n\n                {item.displayLink}\n              </a>\n              <a className=\"searchPage__resultTitle\" href={item.link}>\n                <h2>{item.title}</h2>\n              </a>\n              <p className=\"searchPage__resultSnippet\">{item.snippet}</p>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SearchPage;\n","import React from 'react';\nimport Home from './pages/Home.js';\nimport './pages/Home.css';\nimport './pages/Search.css';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchPage from \"./pages/SearchPage.js\";\nimport \"./pages/SearchPage.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/search\">\n            <SearchPage />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from \"./StateProvider\";\nimport reducer, { initialState } from \"./reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}